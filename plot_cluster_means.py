import numpy as np
from scipy.cluster.vq import kmeans, vq
import matplotlib.pyplot as plt
import h5py
from birdwerdz import process_recording
from functools import partial
import argparse


def template_yaxis(y_ax):
    y_ax.label.set_rotation(0)
    y_ax.label.set_size(16)

    y_ax.set_ticks([])
    y_ax.set_label_text('Template')
    y_ax.label.set_horizontalalignment('right')

def cluster_yaxis(y_ax, idx):
    y_ax.label.set_rotation(0)
    y_ax.label.set_size(20)
    y_ax.label.set_y(.25)
    y_ax.set_ticks([])
    y_ax.set_label_text(idx)
    y_ax.label.set_horizontalalignment('right')

def main():

        p = argparse.ArgumentParser(prog="plot_centroids", 
                               description="""Plots the centroids of each motif cluster.""")
        p.add_argument("motif_file", help="""An arf(hdf5) file generated by classify.py""")

        options = p.parse_args()

        with h5py.File(options.motif_file,'r+') as src:            

            spec_path = 'cluster_mean_spectrograms'
            template_path = 'template'
            
            nplots = src[spec_path].shape[0] + 2
            
            T_spec=process_recording(src['template'], src[template_path].attrs['sampling_rate'])

            f=plt.figure(figsize=(10,10))

            sp=f.add_subplot(nplots,1,1)
            sp.imshow(T_spec, origin='lower', aspect='auto')
            sp.set_title('Template')
            template_yaxis(sp.yaxis)
            sp.xaxis.set_visible(False)


            for i,spectrogram in enumerate(src[spec_path]):
                spec_sp = f.add_subplot(nplots,1,i+3)
                spec_sp.imshow(spectrogram, origin='lower', aspect='auto')
                cluster_yaxis(spec_sp.yaxis, i)
                if i == 0:
                    spec_sp.set_title('Cluster Mean Spectrograms')
                if i+3 < nplots:
                    spec_sp.xaxis.set_visible(False)

            sp.xaxis.set_label_text('Time (ms)')
            plt.show()

if __name__=='__main__':
    main()
