import numpy as np
from scipy.cluster.vq import kmeans, vq
import matplotlib.pyplot as plt
import h5py
from birdwerdz.dtw import process_recording
from functools import partial
import argparse


def template_yaxis(y_ax):
    y_ax.label.set_rotation(0)
    y_ax.label.set_size(16)

    y_ax.set_ticks([])
    y_ax.set_label_text('Template')
    y_ax.label.set_horizontalalignment('right')

def cluster_yaxis(y_ax, idx):
    y_ax.label.set_rotation(0)
    y_ax.label.set_size(20)
    y_ax.label.set_y(.25)
    y_ax.set_ticks([])
    y_ax.set_label_text(idx)
    y_ax.label.set_horizontalalignment('right')

def main():

        p = argparse.ArgumentParser(prog="plot_centroids", 
                               description="""Plots the centroids of each motif cluster.""")
        p.add_argument("motif_file", help="""An arf(hdf5) file generated by classify.py""")

        options = p.parse_args()


        with h5py.File(options.motif_file,'r+') as arf:            
                      
            nplots = arf[centroid_path].shape[0] + 1
            
            T_spec=process_recording(arf['template'], arf[template_path].attrs['sampling_rate'])
            
            mean_specs = mean_spectrograms(arf)

            f=plt.figure(figsize=(10,10))
            sp=f.add_subplot(nplots,2,1)
            sp.plot(T_spec.sum(0))
            sp.set_title('Amplitude Vectors')
            template_yaxis(sp.yaxis)
            sp.xaxis.set_visible(False)
            
            ymax=max(np.max(np.abs(T_spec.sum(0))), np.max(np.abs(arf['centroids']['amplitude'])))


            sp=f.add_subplot(nplots,2,2)
            sp.imshow(T_spec, origin='lower', aspect='auto')
            sp.set_title('Mean Spectrograms')
            template_yaxis(sp.yaxis)
            sp.xaxis.set_visible(False)

            for i,centroid in enumerate(arf['centroids']):
                amp_sp = f.add_subplot(nplots,2,2*i+3)
                amp_sp.plot(centroid['amplitude'])
                cluster_yaxis(amp_sp.yaxis, i)
                if i < arf['centroids']['amplitude'].shape[0]-1:
                    amp_sp.xaxis.set_visible(False)
                plt.ylim(-ymax, ymax)

                spec_sp = f.add_subplot(nplots,2,2*i+4)
                spec_sp.imshow(centroid['mean_spectrograms'][i,:,:], origin='lower', aspect='auto')
                cluster_yaxis(spec_sp.yaxis, i)
                if i < arf['centroids']['mean_spectrograms'].shape[0]-1:
                    spec_sp.xaxis.set_visible(False)

            sp.xaxis.set_label_text('Time (ms)')
            plt.show()

if __name__=='__main__':
    main()
